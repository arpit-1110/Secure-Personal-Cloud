/**
  * This testing method was described at Appendix A.2 of Twofish paper:
  * https://www.schneier.com/paper-twofish-paper.pdf
  */
/*global describe it expect twofish*/ // Suppressing eslint warnings.
(function doTest(describe, it, expect, twofish){
  'use strict';

  var twF = twofish()
    , useCaseName
    , singleTest = function doTestCase(thisTest) {
        var ct = twF.encrypt(thisTest.key, thisTest.pt)
          , cpt = twF.decrypt(thisTest.key, ct);

        expect(ct).toEqual(thisTest.ct);
        expect(cpt).toEqual(thisTest.pt);
      };
  describe('ECB TBL - 128 keysize', function doTestSuite() {
    var tests = [
          {
            'key': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'pt': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'ct': [0x9F, 0x58, 0x9F, 0x5C, 0xF6, 0x12, 0x2C, 0x32, 0xB6, 0xBF, 0xEC, 0x2F, 0x2A, 0xE8, 0xC3, 0x5A]
          },
          {
            'key': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'pt': [0x9F, 0x58, 0x9F, 0x5C, 0xF6, 0x12, 0x2C, 0x32, 0xB6, 0xBF, 0xEC, 0x2F, 0x2A, 0xE8, 0xC3, 0x5A],
            'ct': [0xD4, 0x91, 0xDB, 0x16, 0xE7, 0xB1, 0xC3, 0x9E, 0x86, 0xCB, 0x08, 0x6B, 0x78, 0x9F, 0x54, 0x19]
          },
          {
            'key': [0x9F, 0x58, 0x9F, 0x5C, 0xF6, 0x12, 0x2C, 0x32, 0xB6, 0xBF, 0xEC, 0x2F, 0x2A, 0xE8, 0xC3, 0x5A],
            'pt': [0xD4, 0x91, 0xDB, 0x16, 0xE7, 0xB1, 0xC3, 0x9E, 0x86, 0xCB, 0x08, 0x6B, 0x78, 0x9F, 0x54, 0x19],
            'ct': [0x01, 0x9F, 0x98, 0x09, 0xDE, 0x17, 0x11, 0x85, 0x8F, 0xAA, 0xC3, 0xA3, 0xBA, 0x20, 0xFB, 0xC3]
          },
          {
            'key': [0xD4, 0x91, 0xDB, 0x16, 0xE7, 0xB1, 0xC3, 0x9E, 0x86, 0xCB, 0x08, 0x6B, 0x78, 0x9F, 0x54, 0x19],
            'pt': [0x01, 0x9F, 0x98, 0x09, 0xDE, 0x17, 0x11, 0x85, 0x8F, 0xAA, 0xC3, 0xA3, 0xBA, 0x20, 0xFB, 0xC3],
            'ct': [0x63, 0x63, 0x97, 0x7D, 0xE8, 0x39, 0x48, 0x62, 0x97, 0xE6, 0x61, 0xC6, 0xC9, 0xD6, 0x68, 0xEB]
          },
          {
            'key': [0x01, 0x9F, 0x98, 0x09, 0xDE, 0x17, 0x11, 0x85, 0x8F, 0xAA, 0xC3, 0xA3, 0xBA, 0x20, 0xFB, 0xC3],
            'pt': [0x63, 0x63, 0x97, 0x7D, 0xE8, 0x39, 0x48, 0x62, 0x97, 0xE6, 0x61, 0xC6, 0xC9, 0xD6, 0x68, 0xEB],
            'ct': [0x81, 0x6D, 0x5B, 0xD0, 0xFA, 0xE3, 0x53, 0x42, 0xBF, 0x2A, 0x74, 0x12, 0xC2, 0x46, 0xF7, 0x52]
          },
          {
            'key': [0x63, 0x63, 0x97, 0x7D, 0xE8, 0x39, 0x48, 0x62, 0x97, 0xE6, 0x61, 0xC6, 0xC9, 0xD6, 0x68, 0xEB],
            'pt': [0x81, 0x6D, 0x5B, 0xD0, 0xFA, 0xE3, 0x53, 0x42, 0xBF, 0x2A, 0x74, 0x12, 0xC2, 0x46, 0xF7, 0x52],
            'ct': [0x54, 0x49, 0xEC, 0xA0, 0x08, 0xFF, 0x59, 0x21, 0x15, 0x5F, 0x59, 0x8A, 0xF4, 0xCE, 0xD4, 0xD0]
          },
          {
            'key': [0x81, 0x6D, 0x5B, 0xD0, 0xFA, 0xE3, 0x53, 0x42, 0xBF, 0x2A, 0x74, 0x12, 0xC2, 0x46, 0xF7, 0x52],
            'pt': [0x54, 0x49, 0xEC, 0xA0, 0x08, 0xFF, 0x59, 0x21, 0x15, 0x5F, 0x59, 0x8A, 0xF4, 0xCE, 0xD4, 0xD0],
            'ct': [0x66, 0x00, 0x52, 0x2E, 0x97, 0xAE, 0xB3, 0x09, 0x4E, 0xD5, 0xF9, 0x2A, 0xFC, 0xBC, 0xDD, 0x10]
          },
          {
            'key': [0x54, 0x49, 0xEC, 0xA0, 0x08, 0xFF, 0x59, 0x21, 0x15, 0x5F, 0x59, 0x8A, 0xF4, 0xCE, 0xD4, 0xD0],
            'pt': [0x66, 0x00, 0x52, 0x2E, 0x97, 0xAE, 0xB3, 0x09, 0x4E, 0xD5, 0xF9, 0x2A, 0xFC, 0xBC, 0xDD, 0x10],
            'ct': [0x34, 0xC8, 0xA5, 0xFB, 0x2D, 0x3D, 0x08, 0xA1, 0x70, 0xD1, 0x20, 0xAC, 0x6D, 0x26, 0xDB, 0xFA]
          },
          {
            'key': [0x66, 0x00, 0x52, 0x2E, 0x97, 0xAE, 0xB3, 0x09, 0x4E, 0xD5, 0xF9, 0x2A, 0xFC, 0xBC, 0xDD, 0x10],
            'pt': [0x34, 0xC8, 0xA5, 0xFB, 0x2D, 0x3D, 0x08, 0xA1, 0x70, 0xD1, 0x20, 0xAC, 0x6D, 0x26, 0xDB, 0xFA],
            'ct': [0x28, 0x53, 0x0B, 0x35, 0x8C, 0x1B, 0x42, 0xEF, 0x27, 0x7D, 0xE6, 0xD4, 0x40, 0x7F, 0xC5, 0x91]
          },
          {
            'key': [0x34, 0xC8, 0xA5, 0xFB, 0x2D, 0x3D, 0x08, 0xA1, 0x70, 0xD1, 0x20, 0xAC, 0x6D, 0x26, 0xDB, 0xFA],
            'pt': [0x28, 0x53, 0x0B, 0x35, 0x8C, 0x1B, 0x42, 0xEF, 0x27, 0x7D, 0xE6, 0xD4, 0x40, 0x7F, 0xC5, 0x91],
            'ct': [0x8A, 0x8A, 0xB9, 0x83, 0x31, 0x0E, 0xD7, 0x8C, 0x8C, 0x0E, 0xCD, 0xE0, 0x30, 0xB8, 0xDC, 0xA4]
          }
        ]
      , testsIndex = 0
      , testsLength = tests.length
      , aTest
      , key
      , pt
      , ct;

    for (; testsIndex < testsLength; testsIndex += 1) {

      aTest = tests[testsIndex];
      useCaseName = 'ecb 128, I = ' + (testsIndex + 1);

      it(useCaseName, singleTest.bind(this, aTest));
    }

    pt = aTest.pt;
    ct = aTest.ct;
    for (; testsIndex + 1 < 46; testsIndex += 1) {
      key = pt;
      pt = ct;
      ct = twF.encrypt(key, pt);
    }

    aTest = {
      'key': pt,
      'pt': ct,
      'ct': [0x13, 0x7A, 0x24, 0xCA, 0x47, 0xCD, 0x12, 0xBE, 0x81, 0x8D, 0xF4, 0xD2, 0xF4, 0x35, 0x59, 0x60]
    };
    it('ecb 128, I = 46', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt,
      'pt': aTest.ct,
      'ct': [0xBC, 0xA7, 0x24, 0xA5, 0x45, 0x33, 0xC6, 0x98, 0x7E, 0x14, 0xAA, 0x82, 0x79, 0x52, 0xF9, 0x21]
    };
    it('ecb 128, I = 47', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt,
      'pt': aTest.ct,
      'ct': [0x6B, 0x45, 0x92, 0x86, 0xF3, 0xFF, 0xD2, 0x8D, 0x49, 0xF1, 0x5B, 0x15, 0x81, 0xB0, 0x8E, 0x42]
    };
    it('ecb 128, I = 48', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt,
      'pt': aTest.ct,
      'ct': [0x5D, 0x9D, 0x4E, 0xEF, 0xFA, 0x91, 0x51, 0x57, 0x55, 0x24, 0xF1, 0x15, 0x81, 0x5A, 0x12, 0xE0]
    };
    it('ecb 128, I = 49', singleTest.bind(this, aTest));
  });

  describe('ECB TBL - 192 keysize', function doTestSuite() {
    var tests = [
          {
            'key': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'pt': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'ct': [0xEF, 0xA7, 0x1F, 0x78, 0x89, 0x65, 0xBD, 0x44, 0x53, 0xF8, 0x60, 0x17, 0x8F, 0xC1, 0x91, 0x01]
          },
          {
            'key': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'pt': [0xEF, 0xA7, 0x1F, 0x78, 0x89, 0x65, 0xBD, 0x44, 0x53, 0xF8, 0x60, 0x17, 0x8F, 0xC1, 0x91, 0x01],
            'ct': [0x88, 0xB2, 0xB2, 0x70, 0x6B, 0x10, 0x5E, 0x36, 0xB4, 0x46, 0xBB, 0x6D, 0x73, 0x1A, 0x1E, 0x88]
          },
          {
            'key': [0xEF, 0xA7, 0x1F, 0x78, 0x89, 0x65, 0xBD, 0x44, 0x53, 0xF8, 0x60, 0x17, 0x8F, 0xC1, 0x91, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'pt': [0x88, 0xB2, 0xB2, 0x70, 0x6B, 0x10, 0x5E, 0x36, 0xB4, 0x46, 0xBB, 0x6D, 0x73, 0x1A, 0x1E, 0x88],
            'ct': [0x39, 0xDA, 0x69, 0xD6, 0xBA, 0x49, 0x97, 0xD5, 0x85, 0xB6, 0xDC, 0x07, 0x3C, 0xA3, 0x41, 0xB2]
          },
          {
            'key': [0x88, 0xB2, 0xB2, 0x70, 0x6B, 0x10, 0x5E, 0x36, 0xB4, 0x46, 0xBB, 0x6D, 0x73, 0x1A, 0x1E, 0x88, 0xEF, 0xA7, 0x1F, 0x78, 0x89, 0x65, 0xBD, 0x44],
            'pt': [0x39, 0xDA, 0x69, 0xD6, 0xBA, 0x49, 0x97, 0xD5, 0x85, 0xB6, 0xDC, 0x07, 0x3C, 0xA3, 0x41, 0xB2],
            'ct': [0x18, 0x2B, 0x02, 0xD8, 0x14, 0x97, 0xEA, 0x45, 0xF9, 0xDA, 0xAC, 0xDC, 0x29, 0x19, 0x3A, 0x65]
          },
          {
            'key': [0x39, 0xDA, 0x69, 0xD6, 0xBA, 0x49, 0x97, 0xD5, 0x85, 0xB6, 0xDC, 0x07, 0x3C, 0xA3, 0x41, 0xB2, 0x88, 0xB2, 0xB2, 0x70, 0x6B, 0x10, 0x5E, 0x36],
            'pt': [0x18, 0x2B, 0x02, 0xD8, 0x14, 0x97, 0xEA, 0x45, 0xF9, 0xDA, 0xAC, 0xDC, 0x29, 0x19, 0x3A, 0x65],
            'ct': [0x7A, 0xFF, 0x7A, 0x70, 0xCA, 0x2F, 0xF2, 0x8A, 0xC3, 0x1D, 0xD8, 0xAE, 0x5D, 0xAA, 0xAB, 0x63]
          },
          {
            'key': [0x18, 0x2B, 0x02, 0xD8, 0x14, 0x97, 0xEA, 0x45, 0xF9, 0xDA, 0xAC, 0xDC, 0x29, 0x19, 0x3A, 0x65, 0x39, 0xDA, 0x69, 0xD6, 0xBA, 0x49, 0x97, 0xD5],
            'pt': [0x7A, 0xFF, 0x7A, 0x70, 0xCA, 0x2F, 0xF2, 0x8A, 0xC3, 0x1D, 0xD8, 0xAE, 0x5D, 0xAA, 0xAB, 0x63],
            'ct': [0xD1, 0x07, 0x9B, 0x78, 0x9F, 0x66, 0x66, 0x49, 0xB6, 0xBD, 0x7D, 0x16, 0x29, 0xF1, 0xF7, 0x7E]
          },
          {
            'key': [0x7A, 0xFF, 0x7A, 0x70, 0xCA, 0x2F, 0xF2, 0x8A, 0xC3, 0x1D, 0xD8, 0xAE, 0x5D, 0xAA, 0xAB, 0x63, 0x18, 0x2B, 0x02, 0xD8, 0x14, 0x97, 0xEA, 0x45],
            'pt': [0xD1, 0x07, 0x9B, 0x78, 0x9F, 0x66, 0x66, 0x49, 0xB6, 0xBD, 0x7D, 0x16, 0x29, 0xF1, 0xF7, 0x7E],
            'ct': [0x3A, 0xF6, 0xF7, 0xCE, 0x5B, 0xD3, 0x5E, 0xF1, 0x8B, 0xEC, 0x6F, 0xA7, 0x87, 0xAB, 0x50, 0x6B]
          },
          {
            'key': [0xD1, 0x07, 0x9B, 0x78, 0x9F, 0x66, 0x66, 0x49, 0xB6, 0xBD, 0x7D, 0x16, 0x29, 0xF1, 0xF7, 0x7E, 0x7A, 0xFF, 0x7A, 0x70, 0xCA, 0x2F, 0xF2, 0x8A],
            'pt': [0x3A, 0xF6, 0xF7, 0xCE, 0x5B, 0xD3, 0x5E, 0xF1, 0x8B, 0xEC, 0x6F, 0xA7, 0x87, 0xAB, 0x50, 0x6B],
            'ct': [0xAE, 0x81, 0x09, 0xBF, 0xDA, 0x85, 0xC1, 0xF2, 0xC5, 0x03, 0x8B, 0x34, 0xED, 0x69, 0x1B, 0xFF]
          },
          {
            'key': [0x3A, 0xF6, 0xF7, 0xCE, 0x5B, 0xD3, 0x5E, 0xF1, 0x8B, 0xEC, 0x6F, 0xA7, 0x87, 0xAB, 0x50, 0x6B, 0xD1, 0x07, 0x9B, 0x78, 0x9F, 0x66, 0x66, 0x49],
            'pt': [0xAE, 0x81, 0x09, 0xBF, 0xDA, 0x85, 0xC1, 0xF2, 0xC5, 0x03, 0x8B, 0x34, 0xED, 0x69, 0x1B, 0xFF],
            'ct': [0x89, 0x3F, 0xD6, 0x7B, 0x98, 0xC5, 0x50, 0x07, 0x35, 0x71, 0xBD, 0x63, 0x12, 0x63, 0xFC, 0x78]
          },
          {
            'key': [0xAE, 0x81, 0x09, 0xBF, 0xDA, 0x85, 0xC1, 0xF2, 0xC5, 0x03, 0x8B, 0x34, 0xED, 0x69, 0x1B, 0xFF, 0x3A, 0xF6, 0xF7, 0xCE, 0x5B, 0xD3, 0x5E, 0xF1],
            'pt': [0x89, 0x3F, 0xD6, 0x7B, 0x98, 0xC5, 0x50, 0x07, 0x35, 0x71, 0xBD, 0x63, 0x12, 0x63, 0xFC, 0x78],
            'ct': [0x16, 0x43, 0x4F, 0xC9, 0xC8, 0x84, 0x1A, 0x63, 0xD5, 0x87, 0x00, 0xB5, 0x57, 0x8E, 0x8F, 0x67]
          }
        ]
      , testsIndex = 0
      , testsLength = tests.length
      , aTest
      , key
      , pt
      , ct;

    for (; testsIndex < testsLength; testsIndex += 1) {

      aTest = tests[testsIndex];
      useCaseName = 'ecb 192, I = ' + (testsIndex + 1);

      it(useCaseName, singleTest.bind(this, aTest));
    }

    key = aTest.key;
    pt = aTest.pt;
    ct = aTest.ct;
    for (; testsIndex + 1 < 46; testsIndex += 1) {
      key = pt.concat(key.slice(0, 8));
      pt = ct;
      ct = twF.encrypt(key, pt);
    }

    aTest = {
      'key': pt.concat(key.slice(0, 8)),
      'pt': ct,
      'ct': [0xDE, 0xA4, 0xF3, 0xDA, 0x75, 0xEC, 0x7A, 0x8E, 0xAC, 0x38, 0x61, 0xA9, 0x91, 0x24, 0x02, 0xCD]
    };
    it('ecb 192, I = 46', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt.concat(aTest.key.slice(0, 8)),
      'pt': aTest.ct,
      'ct': [0xFB, 0x66, 0x52, 0x2C, 0x33, 0x2F, 0xCC, 0x4C, 0x04, 0x2A, 0xBE, 0x32, 0xFA, 0x9E, 0x90, 0x2F]
    };
    it('ecb 192, I = 47', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt.concat(aTest.key.slice(0, 8)),
      'pt': aTest.ct,
      'ct': [0xF0, 0xAB, 0x73, 0x30, 0x11, 0x25, 0xFA, 0x21, 0xEF, 0x70, 0xBE, 0x53, 0x85, 0xFB, 0x76, 0xB6]
    };
    it('ecb 192, I = 48', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt.concat(aTest.key.slice(0, 8)),
      'pt': aTest.ct,
      'ct': [0xE7, 0x54, 0x49, 0x21, 0x2B, 0xEE, 0xF9, 0xF4, 0xA3, 0x90, 0xBD, 0x86, 0x0A, 0x64, 0x09, 0x41]
    };
    it('ecb 192, I = 49', singleTest.bind(this, aTest));
  });

  describe('ECB TBL - 256 keysize', function doTestSuite() {
    var tests = [
          {
            'key': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'pt': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'ct': [0x57, 0xFF, 0x73, 0x9D, 0x4D, 0xC9, 0x2C, 0x1B, 0xD7, 0xFC, 0x01, 0x70, 0x0C, 0xC8, 0x21, 0x6F]
          },
          {
            'key': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'pt': [0x57, 0xFF, 0x73, 0x9D, 0x4D, 0xC9, 0x2C, 0x1B, 0xD7, 0xFC, 0x01, 0x70, 0x0C, 0xC8, 0x21, 0x6F],
            'ct': [0xD4, 0x3B, 0xB7, 0x55, 0x6E, 0xA3, 0x2E, 0x46, 0xF2, 0xA2, 0x82, 0xB7, 0xD4, 0x5B, 0x4E, 0x0D]
          },
          {
            'key': [0x57, 0xFF, 0x73, 0x9D, 0x4D, 0xC9, 0x2C, 0x1B, 0xD7, 0xFC, 0x01, 0x70, 0x0C, 0xC8, 0x21, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
            'pt': [0xD4, 0x3B, 0xB7, 0x55, 0x6E, 0xA3, 0x2E, 0x46, 0xF2, 0xA2, 0x82, 0xB7, 0xD4, 0x5B, 0x4E, 0x0D],
            'ct': [0x90, 0xAF, 0xE9, 0x1B, 0xB2, 0x88, 0x54, 0x4F, 0x2C, 0x32, 0xDC, 0x23, 0x9B, 0x26, 0x35, 0xE6]
          },
          {
            'key': [0xD4, 0x3B, 0xB7, 0x55, 0x6E, 0xA3, 0x2E, 0x46, 0xF2, 0xA2, 0x82, 0xB7, 0xD4, 0x5B, 0x4E, 0x0D, 0x57, 0xFF, 0x73, 0x9D, 0x4D, 0xC9, 0x2C, 0x1B, 0xD7, 0xFC, 0x01, 0x70, 0x0C, 0xC8, 0x21, 0x6F],
            'pt': [0x90, 0xAF, 0xE9, 0x1B, 0xB2, 0x88, 0x54, 0x4F, 0x2C, 0x32, 0xDC, 0x23, 0x9B, 0x26, 0x35, 0xE6],
            'ct': [0x6C, 0xB4, 0x56, 0x1C, 0x40, 0xBF, 0x0A, 0x97, 0x05, 0x93, 0x1C, 0xB6, 0xD4, 0x08, 0xE7, 0xFA]
          },
          {
            'key': [0x90, 0xAF, 0xE9, 0x1B, 0xB2, 0x88, 0x54, 0x4F, 0x2C, 0x32, 0xDC, 0x23, 0x9B, 0x26, 0x35, 0xE6, 0xD4, 0x3B, 0xB7, 0x55, 0x6E, 0xA3, 0x2E, 0x46, 0xF2, 0xA2, 0x82, 0xB7, 0xD4, 0x5B, 0x4E, 0x0D],
            'pt': [0x6C, 0xB4, 0x56, 0x1C, 0x40, 0xBF, 0x0A, 0x97, 0x05, 0x93, 0x1C, 0xB6, 0xD4, 0x08, 0xE7, 0xFA],
            'ct': [0x30, 0x59, 0xD6, 0xD6, 0x17, 0x53, 0xB9, 0x58, 0xD9, 0x2F, 0x47, 0x81, 0xC8, 0x64, 0x0E, 0x58]
          },
          {
            'key': [0x6C, 0xB4, 0x56, 0x1C, 0x40, 0xBF, 0x0A, 0x97, 0x05, 0x93, 0x1C, 0xB6, 0xD4, 0x08, 0xE7, 0xFA, 0x90, 0xAF, 0xE9, 0x1B, 0xB2, 0x88, 0x54, 0x4F, 0x2C, 0x32, 0xDC, 0x23, 0x9B, 0x26, 0x35, 0xE6],
            'pt': [0x30, 0x59, 0xD6, 0xD6, 0x17, 0x53, 0xB9, 0x58, 0xD9, 0x2F, 0x47, 0x81, 0xC8, 0x64, 0x0E, 0x58],
            'ct': [0xE6, 0x94, 0x65, 0x77, 0x05, 0x05, 0xD7, 0xF8, 0x0E, 0xF6, 0x8C, 0xA3, 0x8A, 0xB3, 0xA3, 0xD6]
          },
          {
            'key': [0x30, 0x59, 0xD6, 0xD6, 0x17, 0x53, 0xB9, 0x58, 0xD9, 0x2F, 0x47, 0x81, 0xC8, 0x64, 0x0E, 0x58, 0x6C, 0xB4, 0x56, 0x1C, 0x40, 0xBF, 0x0A, 0x97, 0x05, 0x93, 0x1C, 0xB6, 0xD4, 0x08, 0xE7, 0xFA],
            'pt': [0xE6, 0x94, 0x65, 0x77, 0x05, 0x05, 0xD7, 0xF8, 0x0E, 0xF6, 0x8C, 0xA3, 0x8A, 0xB3, 0xA3, 0xD6],
            'ct': [0x5A, 0xB6, 0x7A, 0x5F, 0x85, 0x39, 0xA4, 0xA5, 0xFD, 0x9F, 0x03, 0x73, 0xBA, 0x46, 0x34, 0x66]
          },
          {
            'key': [0xE6, 0x94, 0x65, 0x77, 0x05, 0x05, 0xD7, 0xF8, 0x0E, 0xF6, 0x8C, 0xA3, 0x8A, 0xB3, 0xA3, 0xD6, 0x30, 0x59, 0xD6, 0xD6, 0x17, 0x53, 0xB9, 0x58, 0xD9, 0x2F, 0x47, 0x81, 0xC8, 0x64, 0x0E, 0x58],
            'pt': [0x5A, 0xB6, 0x7A, 0x5F, 0x85, 0x39, 0xA4, 0xA5, 0xFD, 0x9F, 0x03, 0x73, 0xBA, 0x46, 0x34, 0x66],
            'ct': [0xDC, 0x09, 0x6B, 0xCD, 0x99, 0xFC, 0x72, 0xF7, 0x99, 0x36, 0xD4, 0xC7, 0x48, 0xE7, 0x5A, 0xF7]
          },
          {
            'key': [0x5A, 0xB6, 0x7A, 0x5F, 0x85, 0x39, 0xA4, 0xA5, 0xFD, 0x9F, 0x03, 0x73, 0xBA, 0x46, 0x34, 0x66, 0xE6, 0x94, 0x65, 0x77, 0x05, 0x05, 0xD7, 0xF8, 0x0E, 0xF6, 0x8C, 0xA3, 0x8A, 0xB3, 0xA3, 0xD6],
            'pt': [0xDC, 0x09, 0x6B, 0xCD, 0x99, 0xFC, 0x72, 0xF7, 0x99, 0x36, 0xD4, 0xC7, 0x48, 0xE7, 0x5A, 0xF7],
            'ct': [0xC5, 0xA3, 0xE7, 0xCE, 0xE0, 0xF1, 0xB7, 0x26, 0x05, 0x28, 0xA6, 0x8F, 0xB4, 0xEA, 0x05, 0xF2]
          },
          {
            'key': [0xDC, 0x09, 0x6B, 0xCD, 0x99, 0xFC, 0x72, 0xF7, 0x99, 0x36, 0xD4, 0xC7, 0x48, 0xE7, 0x5A, 0xF7, 0x5A, 0xB6, 0x7A, 0x5F, 0x85, 0x39, 0xA4, 0xA5, 0xFD, 0x9F, 0x03, 0x73, 0xBA, 0x46, 0x34, 0x66],
            'pt': [0xC5, 0xA3, 0xE7, 0xCE, 0xE0, 0xF1, 0xB7, 0x26, 0x05, 0x28, 0xA6, 0x8F, 0xB4, 0xEA, 0x05, 0xF2],
            'ct': [0x43, 0xD5, 0xCE, 0xC3, 0x27, 0xB2, 0x4A, 0xB9, 0x0A, 0xD3, 0x4A, 0x79, 0xD0, 0x46, 0x91, 0x51]
          }
        ]
      , testsIndex = 0
      , testsLength = tests.length
      , aTest
      , key
      , pt
      , ct;

    for (; testsIndex < testsLength; testsIndex += 1) {

      aTest = tests[testsIndex];
      useCaseName = 'ecb 256, I = ' + (testsIndex + 1);

      it(useCaseName, singleTest.bind(this, aTest));
    }

    key = aTest.key;
    pt = aTest.pt;
    ct = aTest.ct;
    for (; testsIndex + 1 < 45; testsIndex += 1) {
      key = pt.concat(key.slice(0, 16));
      pt = ct;
      ct = twF.encrypt(key, pt);
    }

    aTest = {
      'key': pt.concat(key.slice(0, 16)),
      'pt': ct,
      'ct': [0xD2, 0xDE, 0xD7, 0x3E, 0x59, 0x31, 0x9A, 0x81, 0x38, 0xE0, 0x33, 0x1F, 0x0E, 0xA1, 0x49, 0xEA]
    };
    it('ecb 256, I = 45', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt.concat(aTest.key.slice(0, 16)),
      'pt': aTest.ct,
      'ct': [0x2E, 0x21, 0x58, 0xBC, 0x3E, 0x5F, 0xC7, 0x14, 0xC1, 0xEE, 0xEC, 0xA0, 0xEA, 0x69, 0x6D, 0x48]
    };
    it('ecb 256, I = 46', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt.concat(aTest.key.slice(0, 16)),
      'pt': aTest.ct,
      'ct': [0x24, 0x8A, 0x7F, 0x35, 0x28, 0xB1, 0x68, 0xAC, 0xFD, 0xD1, 0x38, 0x6E, 0x3F, 0x51, 0xE3, 0x0C]
    };
    it('ecb 256, I = 47', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt.concat(aTest.key.slice(0, 16)),
      'pt': aTest.ct,
      'ct': [0x43, 0x10, 0x58, 0xF4, 0xDB, 0xC7, 0xF7, 0x34, 0xDA, 0x4F, 0x02, 0xF0, 0x4C, 0xC4, 0xF4, 0x59]
    };
    it('ecb 256, I = 48', singleTest.bind(this, aTest));

    aTest = {
      'key': aTest.pt.concat(aTest.key.slice(0, 16)),
      'pt': aTest.ct,
      'ct': [0x37, 0xFE, 0x26, 0xFF, 0x1C, 0xF6, 0x61, 0x75, 0xF5, 0xDD, 0xF4, 0xC3, 0x3B, 0x97, 0xA2, 0x05]
    };
    it('ecb 256, I = 49', singleTest.bind(this, aTest));
  });
}(describe, it, expect, twofish));
